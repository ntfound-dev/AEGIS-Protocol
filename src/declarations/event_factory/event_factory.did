type ValidatedEventData = 
 record {
   details_json: text;
   event_type: text;
   severity: text;
 };
type EventFactory = 
 service {
   /// ===================================================================
   /// Function: declare_event
   /// ===================================================================
   /// Core factory function that processes disaster events and creates DAOs.
   /// 
   /// This function implements the complete disaster event processing pipeline:
   /// 1. Validates the incoming event data structure
   /// 2. Captures factory identity for DAO initialization
   /// 3. Creates initialization arguments with event metadata
   /// 4. Initializes new EventDAO instance with disaster context
   /// 5. Coordinates with InsuranceVault for immediate funding
   /// 6. Returns DAO principal for client tracking and interaction
   /// 
   /// Parameters:
   ///   eventData: ValidatedEventData - Disaster event from AI validation
   ///     - Contains event type, severity, location, and metadata
   ///     - Already validated by Validator Agent for data quality
   ///     - Includes confidence scores and source attribution
   /// 
   /// Returns:
   ///   DeclareEventResult - Success with DAO principal or error message
   ///     - #ok(Principal): New DAO successfully created and initialized
   ///     - #err(Text): Detailed error message for debugging
   /// 
   /// Error Conditions:
   ///   - Invalid or incomplete event data
   ///   - DAO initialization failures
   ///   - InsuranceVault coordination errors
   ///   - Network or inter-canister communication issues
   /// 
   /// Side Effects:
   ///   - Creates new EventDAO canister instance
   ///   - Triggers initial funding release from InsuranceVault
   ///   - Updates internal factory state and metrics
   /// 
   /// Authorization:
   ///   Currently open to all callers - production should implement
   ///   role-based access control to restrict to authorized agents
   /// ===================================================================
   declare_event: (eventData: ValidatedEventData) -> (DeclareEventResult);
 };
type DeclareEventResult = 
 variant {
   err: text;
   ok: principal;
 };
/// =====================================================================
/// Actor: EventFactory
/// =====================================================================
/// Central factory canister for disaster event processing and DAO creation.
/// 
/// Design Pattern: Factory Pattern
///   This canister implements the factory design pattern to dynamically
///   create EventDAO instances for each disaster that requires community
///   response and governance. Each DAO operates independently with its
///   own treasury, proposals, and voting mechanisms.
/// 
/// Lifecycle Management:
///   1. Receive validated disaster event from AI agents
///   2. Validate event data and check authorization
///   3. Create and initialize new EventDAO instance
///   4. Coordinate with InsuranceVault for initial funding
///   5. Return DAO principal for client tracking
/// 
/// Persistent State:
///   - Factory configuration and authorization settings
///   - Registry of created DAOs (if implemented)
///   - Event processing history and metrics
/// 
/// Error Handling Strategy:
///   - Comprehensive validation before state changes
///   - Atomic operations to prevent partial execution
///   - Detailed error messages for debugging
///   - Graceful degradation on component failures
/// =====================================================================
service : () -> EventFactory
