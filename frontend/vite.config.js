// =====================================================================
// AEGIS Protocol - Vite Build Configuration
// =====================================================================
// File: frontend/vite.config.js
// Purpose: Development and build configuration for the frontend
// 
// Features:
//   - Automatic canister ID injection for IC integration
//   - Development server with IC replica proxy
//   - Module resolution for generated declarations
//   - Environment-specific configuration
// 
// Integration Points:
//   - DFX: Reads canister IDs from deployment artifacts
//   - IC Replica: Proxies API calls to local development network
//   - Type Declarations: Resolves generated canister interfaces
// =====================================================================

import { defineConfig } from "vite";
import path from "path";
import fs from "fs";

/**
 * Dynamically load canister IDs from DFX deployment artifacts
 * 
 * This function reads the canister_ids.json file generated by DFX
 * during canister deployment. It provides the frontend with the
 * actual canister IDs needed for blockchain communication.
 * 
 * Network Resolution:
 *   - Checks DFX_NETWORK environment variable (default: "local")
 *   - Resolves path to network-specific canister configuration
 *   - Validates file existence to prevent runtime errors
 * 
 * @returns {Object} Canister ID mapping for the current network
 * @throws {Error} If canister_ids.json is not found
 */
function getCanisterIds() {
  // Determine target network (local development or mainnet)
  const network = process.env.DFX_NETWORK || "local";
  
  // Construct path to canister ID configuration file
  // Path: ../frontend/.dfx/[network]/canister_ids.json
  const canisterIdsPath = path.resolve(__dirname, "..", ".dfx", network, "canister_ids.json");

  // Validate configuration file exists
  if (!fs.existsSync(canisterIdsPath)) {
    throw new Error(
      `Could not find canister_ids.json at ${canisterIdsPath}. ` +
      "Make sure you have deployed your canisters using 'dfx deploy'."
    );
  }

  // Parse and return canister configuration
  const canisterIds = JSON.parse(fs.readFileSync(canisterIdsPath, "utf8"));
  return canisterIds;
}

/**
 * Create environment variables for Vite build process
 * 
 * This function transforms canister IDs into environment variables
 * that can be accessed in the frontend code via process.env.
 * This enables the frontend to communicate with the correct
 * canister instances on the target network.
 * 
 * Variable Format:
 *   - Source: { "event_factory": { "local": "rrkah-fqaaa-aaaaa-aaaaq-cai" } }
 *   - Output: { "process.env.CANISTER_ID_EVENT_FACTORY": "\"rrkah-fqaaa-aaaaa-aaaaq-cai\"" }
 * 
 * Usage in Frontend:
 *   const factoryId = process.env.CANISTER_ID_EVENT_FACTORY;
 * 
 * @returns {Object} Environment variable definitions for Vite
 */
function createEnvVars() {
  const canisterIds = getCanisterIds();
  const network = process.env.DFX_NETWORK || "local";
  const env = {};
  
  // Transform each canister ID into environment variable
  for (const canisterName in canisterIds) {
    // Create environment variable name (uppercase with prefix)
    const envVarName = `process.env.CANISTER_ID_${canisterName.toUpperCase()}`;
    
    // Extract canister ID for current network
    const canisterId = canisterIds[canisterName][network];
    
    // Store as JSON string for Vite's define feature
    env[envVarName] = JSON.stringify(canisterId);
  }
  
  return env;
}

// =====================================================================
// VITE CONFIGURATION
// =====================================================================
// Comprehensive build and development server configuration

export default defineConfig({
  // ===================================================================
  // Environment Variable Injection
  // ===================================================================
  // Inject canister IDs as compile-time constants for frontend access
  // This enables the frontend to communicate with deployed canisters
  define: createEnvVars(),

  // ===================================================================
  // Module Resolution Configuration
  // ===================================================================
  // Configure path aliases for clean imports and generated declarations
  resolve: {
    alias: {
      // Alias for DFX-generated canister declarations
      // Enables: import { event_factory } from "@declarations/event_factory";
      // Path: frontend/../src/declarations (project root/src/declarations)
      "@declarations": path.resolve(__dirname, "..", "src", "declarations"),
      
      // Additional aliases can be added here for other common paths
      // Example: "@assets": path.resolve(__dirname, "assets")
    },
  },

  // ===================================================================
  // Development Server Configuration
  // ===================================================================
  // Configure development server with IC replica integration
  server: {
    // Proxy configuration for Internet Computer communication
    proxy: {
      // Proxy all /api requests to local IC replica
      // This enables frontend to communicate with canisters during development
      "/api": {
        target: "http://127.0.0.1:4943",  // Local IC replica default address
        changeOrigin: true,              // Modify origin header for proper routing
        secure: false,                   // Disable SSL verification for local development
      },
      
      // Additional proxy rules can be added here
      // Example: "/auth": { target: "https://identity.ic0.app", changeOrigin: true }
    },
    
    // Development server configuration
    host: true,        // Allow external connections (useful for mobile testing)
    port: 3000,        // Default development server port
    open: false,       // Don't auto-open browser (optional)
    cors: true,        // Enable CORS for cross-origin requests
  },
  
  // ===================================================================
  // Build Configuration
  // ===================================================================
  // Production build optimizations and output configuration
  build: {
    // Output directory for production builds
    outDir: "dist",
    
    // Generate source maps for debugging (disable in production)
    sourcemap: process.env.NODE_ENV === "development",
    
    // Minification settings
    minify: "terser",
    
    // Rollup-specific options
    rollupOptions: {
      // External dependencies that shouldn't be bundled
      external: [],
      
      // Output configuration
      output: {
        // Manual chunk splitting for better caching
        manualChunks: {
          vendor: ["@dfinity/agent", "@dfinity/auth-client"],
        },
      },
    },
  },
});